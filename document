TThis project will consist in the creation of a sudoku a=bot that can solve puzzles automatically given the input as a list. The list will contain sublists corresponding to each row with empty squares represented as (-1). This program will serve for sudoku enjoyers who would like to see teh solution to extremly difficult puzzles or for those that like to make puzzles who need to check that there is a valid solution.  The program will check new integers (1-9) into each empty square and make sure the puzzle has a valid solution. Next it will continue trying numbers until it generates a guess which will then be checked for validity before becoming the final solution.
A. There will be a next_empty function (argument of puzzle) will serve to identify the next instance of -1 in the lists. It will search for -1 in columns and rows (1-9) and return the row and column as [r,c] and if none are found will return none instead.
B. There will be a valid_check function (argument of row, col, puzzle, and guess) that will ensure that the current guess is a valid solution for the given puzzle. It will work be checking the number present in a given square and ensuring that it does not match any in the current row, column or 3x3 square. It will return a boolean true/false(true for valid guess and false for invalid) It will repeat until the puzzle is filled.
C. Lastly there will be a solve function (argument of puzzle) that serves to generate a final solution to the given puzzle. It will call both previous functions to pick the next location to place an integer and do so and next check through the valid_check function that the said guess is valid. Lastly the function will mutate the original lists to the finla guesses after checking that the solution is valid.  
  As far as the input we need to give the program a representation of the 9x9 board that the puzzle consists of. We will do so using a lists with sublists for each row with empty spaces as -1. So for example one sublist(or row) should look like [[9, 4, -1, -1, 8, 5, -1, -1, 1]
